generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  email         String        @unique @db.VarChar(100)
  password_hash String        @db.VarChar(255)
  phone_number  String?       @unique @db.VarChar(20)
  role          UserRole      @default(USER)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now()) @updatedAt
  addresses     Address[]
  orders        Order[]
  shoppingcart  ShoppingCart?
  wishlists     WishList[]

  @@map("users")
}

model Address {
  id           Int     @id @default(autoincrement())
  street       String  @db.VarChar(100)
  number       Int
  complement   String? @db.VarChar(80)
  neighborhood String  @db.VarChar(80)
  city         String  @db.VarChar(45)
  state        String  @db.VarChar(2)
  zip_code     String  @db.VarChar(45)
  default      Boolean
  userId       Int
  user         User    @relation(fields: [userId], references: [id])
  orders       Order[]

  @@map("addresses")
}

model Product {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(100)
  description       String?
  price             Decimal            @db.Money
  stock             Int
  image_url         String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now()) @updatedAt
  category_id       Int
  category          Category           @relation(fields: [category_id], references: [id])
  shoppingcartitems ShoppingCartItem[]
  wishlistitems     WishListItem[]

  @@map("products")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String
  products    Product[]

  @@map("categories")
}

model WishList {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  created_at    DateTime       @default(now())
  user_id       Int
  wishlistitems WishListItem[]
  user          User           @relation(fields: [user_id], references: [id])

  @@map("wishlists")
}

model WishListItem {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  wishlist_id Int
  product_id  Int
  product     Product  @relation(fields: [product_id], references: [id])
  wishlist    WishList @relation(fields: [wishlist_id], references: [id])

  @@map("wishlistitems")
}

model ShoppingCart {
  id                Int                @id @default(autoincrement())
  created_at        DateTime           @default(now())
  user_id           Int                @unique
  shoppingcartitems ShoppingCartItem[]
  user              User               @relation(fields: [user_id], references: [id])

  @@map("shoppingcarts")
}

model ShoppingCartItem {
  id              Int          @id @default(autoincrement())
  quantity        Int
  created_at      DateTime     @default(now())
  shoppingcart_id Int
  product_id      Int
  product         Product      @relation(fields: [product_id], references: [id])
  shoppingcart    ShoppingCart @relation(fields: [shoppingcart_id], references: [id])

  @@map("shoppingcartitems")
}

model Order {
  id             Int         @id @default(autoincrement())
  created_at     DateTime    @default(now())
  user_id        Int
  orderstatus_id Int
  address_id     Int
  address        Address     @relation(fields: [address_id], references: [id])
  orderstatus    OrderStatus @relation(fields: [orderstatus_id], references: [id])
  user           User        @relation(fields: [user_id], references: [id])
  payment        Payment?

  @@map("orders")
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(50)
  orders Order[]

  @@map("ordersstatus")
}

model Payment {
  id            Int           @id @default(autoincrement())
  method        PaymentMethod
  status        PaymentStatus
  value         Decimal
  transation_id String        @db.VarChar(200)
  created_at    DateTime      @default(now())
  order_id      Int           @unique
  order         Order         @relation(fields: [order_id], references: [id])

  @@map("payments")
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
  BOLETO
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
