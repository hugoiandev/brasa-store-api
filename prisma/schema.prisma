// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentMethod  {
  CREDIT_CARD
  PIX
  BOLETO
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  password_hash String @db.VarChar(255)
  phone_number String? @db.VarChar(20) @unique
  rule UserRole @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())

  addresses Address[]
  wishlists WishList[]
  shoppingcart ShoppingCart?
  orders Order[]

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  street String @db.VarChar(100)
  number Int
  complement String? @db.VarChar(80)
  neighborhood String @db.VarChar(80)
  city String @db.VarChar(45)
  state String @db.VarChar(2)
  zip_code String @db.VarChar(45)
  default Boolean

  orders Order[]

  user User @relation(fields: [userId], references: [id])
  userId Int

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.Text
  price Decimal
  stock Int
  image_url String @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())

  wishlistitems WishListItem[]
  shoppingcartitems ShoppingCartItem[]

  category Category @relation(fields: [category_id], references: [id])
  category_id Int

  @@map("products")
}

model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.Text

  products Product[]

  @@map("categories")
}

model WishList {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  user_id Int

  wishlistitems WishListItem[]

  @@map("wishlists")
}

model WishListItem {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  wishlist WishList @relation(fields: [wishlist_id], references: [id])
  wishlist_id Int

  product Product @relation(fields: [product_id], references: [id])
  product_id Int

  @@map("wishlistitems")
}

model ShoppingCart {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  user_id Int @unique

  shoppingcartitems ShoppingCartItem[]

  @@map("shoppingcarts")
}

model ShoppingCartItem {
  id Int @id @default(autoincrement())
  quantity Int
  created_at DateTime @default(now())

  shoppingcart ShoppingCart @relation(fields: [shoppingcart_id], references: [id])
  shoppingcart_id Int

  product Product @relation(fields: [product_id], references: [id])
  product_id Int

  @@map("shoppingcartitems")
}

model Order {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  payment Payment?

  user User @relation(fields: [user_id], references: [id])
  user_id Int

  orderstatus OrderStatus @relation(fields: [orderstatus_id], references: [id])
  orderstatus_id Int

  address Address @relation(fields: [address_id], references: [id])
  address_id Int

  @@map("orders")
}

model OrderStatus {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)

  orders Order[]

  @@map("ordersstatus")
}

model Payment {
  id Int @id @default(autoincrement())
  method PaymentMethod
  status PaymentStatus
  value Decimal
  transation_id String @db.VarChar(200)
  created_at DateTime @default(now())

  order Order @relation(fields: [order_id], references: [id])
  order_id Int @unique

  @@map("payments")
}